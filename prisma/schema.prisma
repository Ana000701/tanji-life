generator client {
  provider        = "prisma-client-js"
  output          = "../lib/generated/prisma"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(uuid()) @db.Uuid
  name           String           @default("NO_NAME")
  email          String           @unique(map: "user_email_idx")
  password       String?
  role           String           @default("user")
  emailVerified  DateTime?        @db.Timestamp(6)
  image          String?
  address        Json?            @db.Json
  paymentMethod  String?
  createdAt      DateTime         @default(now()) @db.Timestamp(6)
  updatedAt      DateTime         @updatedAt
  account        Account[]
  session        Session[]
  CourseReview   CourseReview[]
  CourseFavorite CourseFavorite[]
  CoursePurchase CoursePurchase[]
}

model Account {
  userId            String   @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "account_userId_user_id_fk")

  @@id([provider, providerAccountId], map: "account_provider_providerAccountId_pk")
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "session_userId_user_id_fk")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// 課程評論
model CourseReview {
  id        String   @id @default(uuid())
  userId    String   @db.Uuid
  courseId  String   @db.Uuid
  rating    Int      @default(5) // 1~5 分
  comment   String?
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId]) // 同一門課只可評論一次
  @@index([courseId])
  @@index([userId])
}

// 課程收藏
model CourseFavorite {
  id        String   @id @default(uuid())
  userId    String   @db.Uuid
  courseId  String   @db.Uuid
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId]) // 避免重複收藏
}

// 購買課程
model CoursePurchase {
  id          String   @id @default(uuid())
  userId      String   @db.Uuid
  courseId    String   @db.Uuid
  price       Decimal  @db.Decimal(12, 2)
  purchasedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId]) // 限定一人購一次（未來可拓展）
}

// 課程分類
model CourseCategory {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

// 課程講師
model CourseTeacher {
  id      String   @id @default(uuid())
  name    String
  avatar  String // 大頭照 URL
  title   String? // 職稱
  bio     String? // 講師簡介
  courses Course[]
}

// 課程標籤
model CourseTag {
  id      String              @id @default(uuid()) @db.Uuid
  name    String              @unique
  courses CourseTagOnCourse[]
}

// 中介表
model CourseTagOnCourse {
  courseId String @db.Uuid
  tagId    String @db.Uuid

  course Course    @relation(fields: [courseId], references: [id])
  tag    CourseTag @relation(fields: [tagId], references: [id])

  @@id([courseId, tagId])
}

// 課程主檔
model Course {
  id             String              @id @default(uuid()) @db.Uuid
  name           String
  slug           String              @unique
  categoryId     String
  teacherId      String
  description    String // 課程摘要
  youWillLearn   String[] // 您將學到（清單）
  suitableFor    String[] // 適合對象（清單）
  price          Decimal             @default(0) @db.Decimal(12, 2)
  originalPrice  Decimal             @default(0) @db.Decimal(12, 2)
  students       Int                 @default(0)
  rating         Decimal             @default(5) @db.Decimal(3, 2)
  totalDuration  Decimal             @default(0) @db.Decimal(4, 1) // 總課程時長
  images         String[]
  isPublished    Boolean             @default(true) // 是否上架
  sortOrder      Int                 @default(0)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  category       CourseCategory      @relation(fields: [categoryId], references: [id])
  teacher        CourseTeacher       @relation(fields: [teacherId], references: [id])
  tags           CourseTagOnCourse[]
  content        CourseContent[]
  CourseReview   CourseReview[]
  CourseFavorite CourseFavorite[]
  CoursePurchase CoursePurchase[]
}

// 課程章節
model CourseContent {
  id        String   @id @default(uuid())
  courseId  String   @db.Uuid
  title     String
  content   String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  videoUrl  String?
  isPreview Boolean  @default(false)
  course    Course   @relation(fields: [courseId], references: [id])

  @@index([courseId, order])
}
